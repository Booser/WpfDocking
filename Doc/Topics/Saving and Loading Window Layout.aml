<?xml version="1.0" encoding="utf-8"?>
<topic id="2330f49a-ac75-4898-a31a-37a0a2a2d950" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>You can save the window layout as <token>DockLayout</token> object, then load the layout
    at a later time.</para>
      <autoOutline />
    </introduction>
    <section address="Section1">
      <title>Saving Window Layout as DockLayout Object</title>
      <content>
        <para>Simply call <codeEntityReference qualifyHint="true" autoUpgrade="true">M:DevZest.Windows.Docking.DockControl.Save</codeEntityReference> method
      to save the current window layout as a <token>DockLayout</token> object. This <token>DockLayout</token> object,
      can be further persisted as XAML string:</para>
        <code language="C#"><![CDATA[
            DockLayout layout = dockControl.Save();
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            settings.IndentChars = new string(' ', 4);
            StringBuilder strbuild = new StringBuilder();
            XmlWriter xmlWriter = XmlWriter.Create(strbuild, settings);
            XamlWriter.Save(layout, xmlWriter);
            Console.WriteLine(strbuild.ToString());
      ]]></code>
        <code language="VB.Net"><![CDATA[
Dim layout As DockLayout = dockControl.Save() 
Dim settings As New XmlWriterSettings() 
settings.Indent = True 
settings.IndentChars = New String(" "c, 4) 
Dim strbuild As New StringBuilder() 
Dim xmlWriter As XmlWriter = XmlWriter.Create(strbuild, settings) 
XamlWriter.Save(layout, xmlWriter) 
Console.WriteLine(strbuild.ToString()) 
      ]]></code>
        <alert class="note">
        The <codeEntityReference qualifyHint="true" autoUpgrade="true">M:System.Windows.Markup.XamlWriter.Save(System.Object)</codeEntityReference>
        method requires full trust. If you want to save the XAML in partial trust, you must implement your own XAML writer,
        as demonstrated in <application>DockSample</application>.
      </alert>
        <para>A sample of persisted XAML string:</para>
        <code language="XAML"><![CDATA[
<DockLayout xmlns="http://schemas.devzest.com/presentation/docking" xmlns:ns2="clr-namespace:DevZest.DockSample;assembly=DockSample" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" DockTreeZOrder="Right, Left, Top, Bottom">
    <DockLayout.DockItems>
        <DockItemReference>DevZest.DockSample.Output</DockItemReference>
        <DockItemReference>DevZest.DockSample.SavedState</DockItemReference>
        <DockItemReference>DevZest.DockSample.PropertiesWindow</DockItemReference>
        <DockItemReference>DevZest.DockSample.SolutionExplorer</DockItemReference>
        <DockItemReference>DevZest.DockSample.Welcome</DockItemReference>
        <DockItemReference>
            <ns2:Document DocumentId="1" />
        </DockItemReference>
        <DockItemReference>
            <ns2:Document DocumentId="2" />
        </DockItemReference>
    </DockLayout.DockItems>
    <DockLayout.ShowActions>
        <ShowAsDockPositionAction DockPosition="BottomAutoHide" Source="1" />
        <ShowAsSidePaneAction Side="Left" Size="*" IsSizeForTarget="True" Target="1" Source="0" />
        <ShowAsDockPositionAction DockPosition="Right" Source="2" />
        <ShowAsTabbedAction Target="2" Source="3" />
        <ShowAsDockPositionAction DockPosition="Document" Source="4" />
        <ShowAsTabbedAction Target="4" Source="5" />
        <ShowAsTabbedAction Target="4" Source="6" />
    </DockLayout.ShowActions>
</DockLayout>
      ]]></code>
        <alert class="important">
        When saving the window layout, an instance of <token>DockItemReference</token> is created for each
        <token>DockItem</token>, with its <codeEntityReference>P:DevZest.Windows.Docking.DockItemReference.Target</codeEntityReference> property
        set to the object instance returned by <token>DockItem.Save</token> method. By default <token>DockItem.Save</token> method
        returns the string of the type when <codeEntityReference>P:DevZest.Windows.Docking.DockItem.HideOnPerformClose</codeEntityReference>
        property is true, otherwise returns this <token>DockItem</token> itself. You may override <token>DockItem.Save</token> to
        provide your own implementation. When loading the window layout, you need to provide a callback delegate to convert
        this saved object back into a <token>DockItem</token>.
      </alert>
      </content>
    </section>
    <section address="Section2">
      <title>Loading Window Layout from DockLayout Object</title>
      <content>
        <para>You can call <codeEntityReference qualifyHint="true" autoUpgrade="true">M:DevZest.Windows.Docking.DockControl.Load(DevZest.Windows.Docking.DockLayout,System.Func{System.Object,DevZest.Windows.Docking.DockItem})</codeEntityReference> method
      to load the previous saved window layout. This method, takes two parameters, one is the previously saved <token>DockLayout</token>,
      the other is a callback delegate to convert the object instance as
      <codeEntityReference qualifyHint="true" autoUpgrade="true">P:DevZest.Windows.Docking.DockItemReference.Target</codeEntityReference> to <token>DockItem</token>:</para>
        <code language="C#"><![CDATA[
        private void LoadLayout_Click(object sender, RoutedEventArgs e)
        {
            ...
            CloseAll();
            dockControl.Load(layout, LoadDockItem);
            ...
        }

        private void CloseAll()
        {
            for (int i = dockControl.DockItems.Count - 1; i >= 0; i--)
            {
                DockItem item = dockControl.DockItems[i];
                item.Close();
            }
        }
        
        private DockItem LoadDockItem(object obj)
        {
            if (welcome.GetType().ToString().Equals(obj))
                return welcome;
            else if (savedLayout.GetType().ToString().Equals(obj))
                return savedLayout;
            else if (output.GetType().ToString().Equals(obj))
                return output;
            else if (solutionExplorer.GetType().ToString().Equals(obj))
                return solutionExplorer;
            else if (propertiesWindow.GetType().ToString().Equals(obj))
                return propertiesWindow;
            else
                return obj as DockItem;
        }
      ]]></code>
        <code language="VB.Net"><![CDATA[
    Private Sub LoadLayout_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)
        ...
        CloseAll()
        dockControl.Load(layout, AddressOf LoadDockItem)
        ...
    End Sub

    Private Sub CloseAll()
        Dim i As Integer = (dockControl.DockItems.Count - 1)
        Do While (i >= 0)
            Dim item As DockItem = dockControl.DockItems(i)
            item.Close()
            i = (i - 1)
        Loop
    End Sub
    
    Private Function LoadDockItem(ByVal obj As Object) As DockItem
        If welcome.GetType.ToString.Equals(obj) Then
            Return welcome
        ElseIf savedLayout.GetType.ToString.Equals(obj) Then
            Return savedLayout
        ElseIf output.GetType.ToString.Equals(obj) Then
            Return output
        ElseIf solutionExplorer.GetType.ToString.Equals(obj) Then
            Return solutionExplorer
        ElseIf propertiesWindow.GetType.ToString.Equals(obj) Then
            Return propertiesWindow
        Else
            Return CType(obj, DockItem)
        End If
    End Function    
      ]]></code>
        <alert class="note">
        You must close all <token>DockItem</token> before loading the window layout, otherwise an exception
        will throw.
      </alert>
      </content>
    </section>
  </developerConceptualDocument>
</topic>