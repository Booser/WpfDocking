<?xml version="1.0" encoding="utf-8"?>
<topic id="8a32ee69-1e20-4b82-b5ee-b576f435d2ab" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <summary>
	WPF Docking is a docking library to integrate undo/redo-able tabbed docking, floating
	and auto hide window management into your application in minutes. Designed and
	developed by Weifen Luo, the author of the most widely used open source Windows Forms based
	<externalLink><linkText>DockPanel Suite</linkText><linkUri>http://sourceforge.net/projects/dockpanelsuite</linkUri></externalLink>,
	we understand your needs and we do much more than just implemementing the features.
  </summary>
    <introduction>
    </introduction>
    <section address="Section1">
      <title>Product Highlights</title>
      <content>
        <autoOutline />
      </content>
      <sections>
        <section address="SubSection1">
          <title>Fully featured docking window management mimics Microsoft Visual Studio</title>
          <content>
            <para>Forget about the window layout and let WPF Docking to manage your application windows
		      just like Microsoft Visual Studio: window can be docked to the sides of main window or other
		      window,  floated above the main window, or tabbed; when docked to the sides of main window, 
		      window can auto hide to preserve the screen. End user can drag and drop to rearrange the layout,
		      or switch between windows using the keyboard. The whole window layout, including the sequence
		      of activation, can be saved, persisted, and loaded at a later time.</para>
          </content>
        </section>
        <section address="SubSection2">
          <title>Undo/redo the docking window layout changes</title>
          <content>
            <para>Make your application more user friendly to allow the end user to undo/redo the
                window layout change! One of the pieces of functionality that users expect to see but
                is often overlooked, perhaps because it is hard to implement, is undo/redo. Our layout
                engine takes this burden off your shoulder easily.</para>
          </content>
        </section>
        <section address="SubSection3">
          <title>XBAP compatible</title>
          <content>
            <para>Our product is written in 100% managed code, and can gracefully degrade itself
                to run under partial trust, without loosing any functionality. The only restrictions
                are: the floating windows are confined to the bounds of the browser window, and to invoke
                window switching you must use Ctrl-1 instead of Ctrl-Tab because WPF cannot detect
                Ctrl-Tab in a browser hosted application (The hot key can easily be customized).</para>
          </content>
        </section>
        <section address="SubSection4">
          <title>Clean implementation and fully customizable</title>
          <content>
            <para>Our API is well designed as simple and easy to use. You can write simple and
                intuitive XAML code; or you only need to remember one overloaded method, DockItem.Show,
                to achieve any window layout in your code behind. Our layout engine (the docking logic)
                is completely seperated from the presentation (the UI). The layout engine implementation
                has absolutely no idea about the presentation implementation - no PART_xxxx magic!
                This makes our product more robust and fully customizable.</para>
          </content>
        </section>
        <section address="SubSection5">
          <title>A set of common controls/components for free!</title>
          <content>
            <para>Including a WPF SplitContainer, draggable WindowControl hosted in WindowPanel,
                and more. These controls/components are used in WPF docking styling extensively.
                You can use them in your own application, commercial or non-commercial, without
                purchasing WPF Docking license.</para>
          </content>
        </section>
      </sections>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
         - A local link
         - An external link
         - A code entity reference

    <link xlink:href="Other Topic's ID"/>
    <link xlink:href="Other Topic's ID">Link inner text</link>

    <externalLink>
        <linkText>Link text</linkText>
        <linkAlternateText>Optional alternate link text</linkAlternateText>
        <linkUri>URI</linkUri>
    </externalLink>

    <codeEntityReference>API member ID</codeEntityReference>

    Examples:

    <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
    <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

    <externalLink>
        <linkText>SHFB on CodePlex</linkText>
        <linkAlternateText>Go to CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SHFB</linkUri>
    </externalLink>

    <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
    <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
    <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
    -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>